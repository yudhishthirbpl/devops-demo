#!groovy

pipeline {
    agent any
    environment {
        VERSION_NUMBER = VersionNumber(projectStartDate: '2017-11-01', versionNumberString: '1.0.${BUILDS_THIS_YEAR}', versionPrefix: '')
        BUILD_VERSION_NUMBER = "${env.VERSION_NUMBER}-b${env.BUILD_NUMBER}"
    }
    stages {
        stage('Init') {
            steps {
                echo "BUILD_VERSION_NUMBER .............. ${env.BUILD_VERSION_NUMBER}"
                slackSend color: "good", message: "Build Started: ${env.JOB_NAME} ${env.BUILD_NUMBER} ${env.BUILD_VERSION_NUMBER} "
            }//end of step
        }//end of Warm-Up stage
        
        stage('SCM'){
            steps {
                    checkout([$class: 'GitSCM',
                            branches: [[name: 'master']],
                            doGenerateSubmoduleConfigurations: false,
                            extensions: [[$class: 'CleanCheckout']],
                            submoduleCfg: [],
                            userRemoteConfigs: [[credentialsId: 'github.scm.account.id', url: "https://github.com/yudhishthirbpl/devops-demo.git"]]
                    ])
            }//end of step - SCM
        }//end of stage - SCM
        stage('Build'){
            steps {
                  sh "${env.WHICH_MVN} -q clean package \"-Dmaven.test.skip=false\" \"-Dbuild-no=${env.BUILD_VERSION_NUMBER}\""  
             }//end of step
        }//end of build stage
        stage('Review'){
            steps {
                    withSonarQubeEnv("sonarqube-lh-67") {
                        sh "${env.WHICH_MVN} \"-Dbuild-no=${env.BUILD_VERSION_NUMBER}\" \"-Dmaven.test.skip=false\" org.sonarsource.scanner.maven:sonar-maven-plugin:3.3.0.603:sonar -Dsonar.projectName=\"devops-demo-dev-to-qa\" -Dsonar.projectVersion=\"${env.BUILD_VERSION_NUMBER}\" -Dsonar.sourceEncoding=\"UTF-8\" -Dsonar.language=\"java\""    
                    }
             }
        }//end of Review stage
        stage('QG'){
            steps {
                script{
                    withSonarQubeEnv("sonarqube-lh-67") {
                         timeout(time: 300, unit: 'SECONDS') {
                            def qg = waitForQualityGate()
                            if (qg.status != 'OK') {
                                error "Pipeline aborted due to quality gate failure: ${qg.status}"
                            }
                         }
                    }
                }
             }
        }//end of QG stage
        stage('Artifactory'){
            steps { 
                    script{
                    def server = Artifactory.newServer url: "http://localhost:8081/artifactory", username: "ykaushik", password: "cq61Presario"
                    def uploadSpec = """{
                                         "files": [
                                                 {
                                                    "pattern": "target/*demo*.jar",
                                                    "target": "devops-demo/demo-jar/"
                                                 }
                                                ]
                                        }"""
                    def buildInfo = Artifactory.newBuildInfo()
                    buildInfo.name = "devops-demo"
                    buildInfo.number = "${BUILD_VERSION_NUMBER}"
                    
                    server.upload spec: uploadSpec, buildInfo: buildInfo
                    server.publishBuildInfo buildInfo
                    server.upload(uploadSpec)
                    
                    }
                }//End of Step
        }//end of Push-To-Artifactory         
        stage('Deploy:Dev'){
            steps {
                sh "cp target/*demo*.jar /tmp/"
            }
        }//end of Deploy 
        /*
        stage('Fx:Selenium'){
            steps {
                echo 'executing Deploy'
            }
        }//end of Fx:Selenium
        stage('Deploy:QA'){
            steps {
                echo 'executing Deploy'
            }
        }//end of Deploy:QA
        */
    }//end of stages
    post {
        always {
            //Clearing workspace
            junit allowEmptyResults: true, keepLongStdio: true, testResults: "target/surefire-reports/*.xml"
            deleteDir()
            echo 'This will always run'
        }
        success {
            echo 'This will run only if successful'
            slackSend color: "good", message: "Build Completed Successfully: ${env.JOB_NAME} ${env.BUILD_NUMBER} ${env.BUILD_VERSION_NUMBER} "
        }
        failure {
            echo 'This will run only if failed'
            slackSend color: "danger", message: "Build Failed: ${env.JOB_NAME} ${env.BUILD_NUMBER} ${env.BUILD_VERSION_NUMBER} "
        }
        unstable {
            echo 'This will run only if the run was marked as unstable'
        }
        changed {
            echo 'This will run only if the state of the Pipeline has changed'
            echo 'For example, if the Pipeline was previously failing but is now successful'
        }
    }
}
